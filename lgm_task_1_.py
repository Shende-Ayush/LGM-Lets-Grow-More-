# -*- coding: utf-8 -*-
"""LGM Task-1 .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1k4eYYjJY6EZ8KmHWNdKS9Zr8_v0T7RXZ

# **Task 1) Iris Flowers Classification ML Project :**

---
# **Author : Ayush Shende**

> *LetsGrowMore (LGM)*

# **Classification using SVC method**

# **Importing libries**
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline

"""# **Getting Data Set**

"""

df= pd.read_csv("Iris .csv")
print(df)

"""# checking data"""

print(df.head())

print(df.tail())

print(df. describe())

"""# **Checking for Data Types and Null values**"""

print(df.info())

"""# **Visualization of data using graphs**"""

df.plot(kind = "scatter",x='SepalLengthCm',y='SepalWidthCm' , figsize=(14,6))
plt.xlabel("SepalLengthCm")
plt.ylabel("SepalWidthCm")
print(plt.show())

df.plot(kind = "density",x='SepalLengthCm',y='SepalWidthCm' , figsize=(14,6))
plt.xlabel("SepalLengthCm")
plt.ylabel("SepalWidthCm")
print(plt.show())

df.plot(kind = "scatter",x='PetalLengthCm',y='PetalWidthCm' , figsize=(14,6))
plt.xlabel("PetalLengthCm")
plt.ylabel("PetalWidthCm")
print(plt.show())

df.plot(kind = "density",x='PetalLengthCm',y='PetalWidthCm' , figsize=(14,6))
plt.xlabel("PetalLengthCm")
plt.ylabel("PetalWidthCm|")

print(plt.show())

"""# **Defineing the data and the lables**"""

x = df.iloc[:,1:5]
y = df.iloc[:,5]

print('x=========== \n\n',x)
print('\n\ny=========\n\n',y)

"""# **Spliting data in to train and test **

> split data in o train and train data set where train data set is 20% of that on the actual data set 


"""

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2,random_state=0)

print(x_train)

print(x_test)

"""# **standardize the data**"""

from sklearn.preprocessing import StandardScaler
sc= StandardScaler()
sc.fit_transform(x_train)
x_train = sc.transform(x_train)
x_test = sc.transform(x_test)

"""# **Fiting Data for SVM (SVC) Algo**

> Creating te model

"""

from sklearn.svm import SVC
svm=SVC(kernel="linear",random_state=0)
svm.fit(x_train,y_train)

"""# **predcting the and testing using test data set**"""

y_pred=svm.predict(x_test)
print(y_pred.reshape(-1,1))

"""# Calculating the **accuracy**"""

from sklearn.metrics import confusion_matrix , accuracy_score
print ('Accuracy of model with test data  == {:.2f}'.format(svm.score( x_train, y_train )))
print('Accuracy Of the modle = {:.2f}'.format(accuracy_score(y_pred,y_test)))

"""# **getting Confusion matrix**"""

print("Comfusion mtrix = \n",confusion_matrix(y_test,y_pred),"\n\n")



